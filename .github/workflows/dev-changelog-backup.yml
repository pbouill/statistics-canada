name: Update Changelog

on:
  pull_request:
    types: [closed]
    branches: 
      - dev
      - develop
      - development
      - main  # Optional: support main branch changelog updates too

permissions:
  contents: write
  pull-requests: read

env:
  # Configuration - can be overridden per repository
  CHANGELOG_FILE: 'CHANGELOG.md'
  CHANGELOG_SCRIPT: '.github/scripts/update_changelog.sh'
  BOT_NAME: 'seawall-changelog-bot[bot]'
  BOT_EMAIL: 'seawall-changelog-bot[bot]@users.noreply.github.com'

jobs:
  update-changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Generate App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        # Use generic secret names that work across repositories
        app-id: ${{ secrets.CHANGELOG_BOT_APP_ID }}
        private-key: ${{ secrets.CHANGELOG_BOT_PRIVATE_KEY }}
        
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.app-token.outputs.token }}
        # Dynamically use the target branch from the PR
        ref: ${{ github.event.pull_request.base.ref }}
        
    - name: Configure Git
      run: |
        git config user.name "${{ env.BOT_NAME }}"
        git config user.email "${{ env.BOT_EMAIL }}"
        
    - name: Update Changelog
      run: |
        # Check if custom changelog script exists, otherwise use inline logic
        if [ -f "${{ env.CHANGELOG_SCRIPT }}" ]; then
          echo "Using custom changelog script: ${{ env.CHANGELOG_SCRIPT }}"
          chmod +x "${{ env.CHANGELOG_SCRIPT }}"
          "${{ env.CHANGELOG_SCRIPT }}" "${{ github.event.pull_request.number }}" "${{ github.event.pull_request.title }}" "${{ github.event.pull_request.user.login }}"
        else
          echo "Using built-in changelog logic"
          # Built-in changelog update logic
          CHANGELOG="${{ env.CHANGELOG_FILE }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          
          # Create changelog if it doesn't exist
          if [ ! -f "$CHANGELOG" ]; then
            echo "# Changelog" > "$CHANGELOG"
            echo "" >> "$CHANGELOG"
            echo "All notable changes to this project will be documented in this file." >> "$CHANGELOG"
            echo "" >> "$CHANGELOG"
            echo "## [Unreleased]" >> "$CHANGELOG"
            echo "" >> "$CHANGELOG"
          fi
          
          # Simple approach: add entry at top of file after first line
          TEMP_FILE=$(mktemp)
          head -n 1 "$CHANGELOG" > "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          echo "## [Unreleased]" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          echo "### Changed" >> "$TEMP_FILE"
          echo "- $PR_TITLE (#$PR_NUMBER) by @$PR_AUTHOR" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          tail -n +2 "$CHANGELOG" | grep -v "^## \[Unreleased\]" >> "$TEMP_FILE"
          mv "$TEMP_FILE" "$CHANGELOG"
          
          echo "Changelog updated for PR #$PR_NUMBER on $TARGET_BRANCH branch"
        fi
        
    - name: Check for changes and update via GitHub API
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const targetBranch = context.payload.pull_request.base.ref;
          const changelogFile = process.env.CHANGELOG_FILE || 'CHANGELOG.md';
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prAuthor = context.payload.pull_request.user.login;
          
          // Read the updated changelog file from the local filesystem
          const updatedContent = fs.readFileSync(changelogFile, 'utf8');
          
          try {
            // Get the current file from GitHub
            const { data: currentFile } = await github.rest.repos.getContent({
              owner,
              repo,
              path: changelogFile,
              ref: targetBranch
            });
            
            const currentContent = Buffer.from(currentFile.content, 'base64').toString('utf8');
            
            // Compare content to see if changes were made
            if (currentContent === updatedContent) {
              console.log(`No changes to ${changelogFile}`);
              return;
            }
            
            // Update the file via GitHub API
            console.log(`Changes detected in ${changelogFile}`);
            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: changelogFile,
              message: `üìù Add PR #${prNumber} to changelog\n\n- ${prTitle}\n\nCo-authored-by: ${prAuthor} <${prAuthor}@users.noreply.github.com>`,
              content: Buffer.from(updatedContent).toString('base64'),
              sha: currentFile.sha,
              branch: targetBranch,
              committer: {
                name: process.env.BOT_NAME || 'seawall-changelog-bot[bot]',
                email: process.env.BOT_EMAIL || 'seawall-changelog-bot[bot]@users.noreply.github.com'
              },
              author: {
                name: process.env.BOT_NAME || 'seawall-changelog-bot[bot]',
                email: process.env.BOT_EMAIL || 'seawall-changelog-bot[bot]@users.noreply.github.com'
              }
            });
            
            console.log(`${changelogFile} updated and pushed to ${targetBranch} branch via GitHub API`);
            
          } catch (error) {
            if (error.status === 404) {
              // File doesn't exist, create it
              console.log(`Creating new ${changelogFile} file`);
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: changelogFile,
                message: `üìù Add PR #${prNumber} to changelog\n\n- ${prTitle}\n\nCo-authored-by: ${prAuthor} <${prAuthor}@users.noreply.github.com>`,
                content: Buffer.from(updatedContent).toString('base64'),
                branch: targetBranch,
                committer: {
                  name: process.env.BOT_NAME || 'seawall-changelog-bot[bot]',
                  email: process.env.BOT_EMAIL || 'seawall-changelog-bot[bot]@users.noreply.github.com'
                },
                author: {
                  name: process.env.BOT_NAME || 'seawall-changelog-bot[bot]',
                  email: process.env.BOT_EMAIL || 'seawall-changelog-bot[bot]@users.noreply.github.com'
                }
              });
              console.log(`${changelogFile} created and pushed to ${targetBranch} branch via GitHub API`);
            } else {
              throw error;
            }
          }
        
    - name: Add comment to PR
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const targetBranch = context.payload.pull_request.base.ref;
          const changelogFile = process.env.CHANGELOG_FILE || 'CHANGELOG.md';
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: prNumber,
            body: `üìù **Changelog Updated on ${targetBranch.charAt(0).toUpperCase() + targetBranch.slice(1)} Branch!**
            
            This PR has been automatically added to the [${changelogFile}](https://github.com/${owner}/${repo}/blob/${targetBranch}/${changelogFile}) file on the \`${targetBranch}\` branch.
            
            The entry will be included in the next release. üöÄ`
          });
