name: Smart Changelog Update

on:
  pull_request:
    types: [closed]
    branches: [ "dev" ]

permissions:
  contents: write
  pull-requests: read

jobs:
  check-changes:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      has-package-changes: ${{ steps.check.outputs.has_changes }}
      skip-changelog: ${{ steps.check.outputs.skip }}
    steps:
    - name: Check if PR contains package changes
      id: check
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Checking PR #$PR_NUMBER for package-relevant changes"
        
        # Get list of changed files (using GitHub API since we don't have repo checked out)
        CHANGED_FILES=$(curl -s -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" | \
          jq -r '.[].filename')
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        HAS_PACKAGE_CHANGES=false
        
        # Check each changed file against package patterns
        while IFS= read -r file; do
          if [ -z "$file" ]; then continue; fi
          
          echo "Checking file: $file"
          
          # Package-relevant patterns (shared logic available in .github/scripts/file-patterns.sh for future refactoring)
          if [[ "$file" =~ ^statscan/ ]] || \
             [[ "$file" =~ ^pyproject\.toml$ ]] || \
             [[ "$file" =~ ^setup\.py$ ]] || \
             [[ "$file" =~ ^requirements.*\.txt$ ]] || \
             [[ "$file" =~ ^README\.md$ ]] || \
             [[ "$file" =~ ^LICENSE$ ]]; then
            echo "  ‚úÖ Package-relevant file found: $file"
            HAS_PACKAGE_CHANGES=true
            break
          fi
          
          # Skip infrastructure-only files
          if [[ "$file" =~ ^\.github/ ]] || \
             [[ "$file" =~ ^docs/ ]] || \
             [[ "$file" =~ ^tools/ ]] || \
             [[ "$file" =~ ^examples/ ]] || \
             [[ "$file" =~ ^scratch/ ]] || \
             [[ "$file" =~ ^tests/.*\.py$ ]]; then
            echo "  ‚è≠Ô∏è  Infrastructure file: $file"
            continue
          fi
          
          # If we reach here, it's an unknown file type - be conservative
          echo "  ‚ùì Unknown file type, being conservative: $file"
          HAS_PACKAGE_CHANGES=true
          break
          
        done <<< "$CHANGED_FILES"
        
        if [ "$HAS_PACKAGE_CHANGES" = true ]; then
          echo "‚úÖ PR contains package changes - changelog update needed"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
        else
          echo "‚è≠Ô∏è  PR contains only infrastructure changes - skipping changelog"
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "skip=true" >> $GITHUB_OUTPUT
        fi

  update-changelog:
    needs: check-changes
    if: needs.check-changes.outputs.skip-changelog == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: Generate App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.CHANGELOG_BOT_APP_ID }}
        private-key: ${{ secrets.CHANGELOG_BOT_PRIVATE_KEY }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "seawall-changelog-bot[bot]"
        git config user.email "seawall-changelog-bot[bot]@users.noreply.github.com"

    - name: Update changelog
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        PR_URL: ${{ github.event.pull_request.html_url }}
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Processing PR #$PR_NUMBER: $PR_TITLE"
        echo "Author: $PR_AUTHOR"
        
        # Create changelog entry
        CHANGELOG_ENTRY="- $PR_TITLE ([#$PR_NUMBER]($PR_URL)) by @$PR_AUTHOR"
        
        # Check if CHANGELOG.md exists
        if [ ! -f "CHANGELOG.md" ]; then
          echo "Creating new CHANGELOG.md"
          cat > CHANGELOG.md << 'EOF'
        # Changelog

        All notable changes to this project will be documented in this file.

        The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
        and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

        ## [Unreleased]

        EOF
        fi
        
        # Check if entry already exists
        if grep -q "\[#$PR_NUMBER\]" CHANGELOG.md; then
          echo "‚è≠Ô∏è  Entry for PR #$PR_NUMBER already exists in changelog"
          exit 0
        fi
        
        # Find the [Unreleased] section and add the entry
        if grep -q "## \[Unreleased\]" CHANGELOG.md; then
          # Insert the new entry after the [Unreleased] line
          awk -v entry="$CHANGELOG_ENTRY" '
            /^## \[Unreleased\]/ { print; print ""; print entry; next }
            { print }
          ' CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
          
          echo "‚úÖ Added entry to changelog"
        else
          echo "‚ùå Could not find [Unreleased] section in changelog"
          exit 1
        fi
        
        # Commit the changes
        git add CHANGELOG.md
        git commit -m "üìù Add PR #$PR_NUMBER to changelog

        $CHANGELOG_ENTRY

        [skip ci]"
        git push

  skip-changelog:
    needs: check-changes
    if: needs.check-changes.outputs.skip-changelog == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Log skip reason
      run: |
        echo "‚è≠Ô∏è  Skipping changelog update for PR #${{ github.event.pull_request.number }}"
        echo "Reason: PR contains only infrastructure/tooling changes"
