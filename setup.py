import sys
from pathlib import Path
import setuptools
from contextlib import contextmanager
from datetime import datetime, timezone
import re

@contextmanager
def local_imports():
    """
    Context manager to temporarily add the local directory to sys.path.
    This allows importing local modules without installing them.
    """
    original_sys_path = sys.path.copy()
    sys.path.insert(0, str(Path(__file__).parent.resolve()))
    try:
        yield
    finally:
        sys.path = original_sys_path


def get_git_commit_hash() -> str:
    """
    Get git commit hash with fallback for CI environments.
    """
    try:
        git_dir = Path('.git')
        if git_dir.exists():
            head_file = git_dir / 'HEAD'
            if head_file.exists():
                with head_file.open() as f:
                    ref = f.read().strip()
                    if ref.startswith('ref: '):
                        ref_path = git_dir / ref[5:]
                        if ref_path.exists():
                            with ref_path.open() as rf:
                                return rf.read().strip()
        # Fallback for CI environments or when git info is not available
        return 'unknown'
    except Exception:
        return 'unknown'


def generate_version() -> str:
    """
    Generate version string based on current timestamp.
    """
    now = datetime.now(tz=timezone.utc)
    return f'{now.year}.{now.month}.{now.day}.{now.hour:02d}{now.minute:02d}{now.second:02d}'


def update_version_file(package_name: str = 'statscan') -> str:
    """
    Update or create the version file with current version info.
    """
    version = generate_version()
    commit = get_git_commit_hash()
    build_time = datetime.now(tz=timezone.utc).isoformat()
    
    version_file = Path(package_name) / '_version.py'
    version_file.parent.mkdir(exist_ok=True)
    
    with version_file.open('w') as f:
        f.write(f'# This file is automatically generated by {Path(__file__).name}\n')
        f.write(f"__version__: str = '{version}'\n")
        f.write(f"__build_time__: str = '{build_time}'\n")
        f.write(f"__commit__: str = '{commit}'\n")
    
    return version


def read_requirements(filename: str = 'requirements.txt') -> list[str]:
    """
    Read requirements from file with fallback.
    """
    req_file = Path(filename)
    if req_file.exists():
        with req_file.open() as f:
            return [line.strip() for line in f if line.strip() and not line.startswith('#')]
    return []


if __name__ == '__main__':
    # Determine package name from directory structure
    package_name = 'statscan'
    
    # Generate version and update version file
    version = update_version_file(package_name)
    
    # Read dependencies
    dependencies = read_requirements('requirements.txt')
    
    setuptools.setup(
        package_dir={package_name: package_name},
        version=version,
        install_requires=dependencies,
    )
