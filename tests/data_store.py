from enum import Enum, auto
from pathlib import Path
from typing import Any
import json
import logging
import warnings
import pytest


logger = logging.getLogger(__name__)
DATA_DIR = Path(__file__).parent / "data"

# Session attribute name for tracking data saved during current session
SESSION_DATA_SAVED_ATTR = "_data_saved_in_session"

class StaleDataWarning(UserWarning):
    """Custom warning for stale data in tests."""
    pass


class DataPaths(Enum):

    def save(
        self, 
        data: Any,
        parents: bool = True,
        exist_ok: bool = True,
    ) -> None:
        """Save a dictionary to the specified file path in JSON format."""
        assert isinstance(self.value, Path)
        self.value.parent.mkdir(parents=parents, exist_ok=exist_ok)
        with self.value.open('w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print(f"âœ… Saved data to {self.value}")
        # Note: Session tracking is handled by pytest_runtest_makereport hook

    def load(self, request: pytest.FixtureRequest | None = None) -> Any:
        """Load JSON data from the specified file path."""
        assert isinstance(self.value, Path)
        if not self.value.exists():
            raise FileNotFoundError(f"Fixture file not found: {self.value}")
        with self.value.open('r', encoding='utf-8') as f:
            data = json.load(f)
        if request:
            self.check_stale(request, stacklevel=3)
        return data

    def check_stale(self, request: pytest.FixtureRequest, stacklevel: int = 2) -> None:
        """
        Check if the data is stale (not generated in current session or associated test failed).
        """
        if isinstance(sd := getattr(request.session, SESSION_DATA_SAVED_ATTR, None), dict):
            record = sd.get(self.name, None)
            if isinstance(record, tuple):
                if not len(record) == 2:
                    raise ValueError(
                        f"[{self.name}] Invalid session data record length. Expected 2, got {len(record)}."
                    )
                test_name, excinfo = record
                if excinfo is not None:
                    warnings.warn(
                        StaleDataWarning(
                            f"[{self.name}] The '{test_name}' test failed. "
                            f"{excinfo}"
                            f"This data at {self.value} may be stale."
                        ),
                        stacklevel=stacklevel
                    )
                    return
                else:
                    logger.debug(f'[{self.name}] Data verified as fresh in this session (generated by: {test_name}).')
                    return
            else:
                if record is not None:
                    raise ValueError(
                        f"[{self.name}] Invalid session data record format. Expected tuple, got {type(record)}."
                    )
            
        warnings.warn(
            StaleDataWarning(
                f"[{self.name}] Data at {self.value} was not generated in this session. "
                f"Run the corresponding network test to generate fresh data."
            ),
            stacklevel=stacklevel
        )


class WDSDataPaths(DataPaths):
    """File paths for WDS test fixtures in tests/data/wds/."""
    @staticmethod
    def _generate_next_value_(
        name: str, 
        start: int, 
        count: int, 
        last_values: list[Path]
    ) -> Path:
        return DATA_DIR / f"wds/{name.lower()}.json"
    
    CODESETS = auto()
    CUBESLIST_LITE = auto()
    CUBEMETA = auto()
