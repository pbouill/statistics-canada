"""
WDS End-User Functionality Tests
================================

Tests focused on end-user workflows and functionality using fixture data.
These tests validate the real-world usage patterns that end users need.

Key areas:
- Data extraction and DataFrame conversion
- Geographic filtering and enumeration usage
- Time series data handling
- Error handling and validation
- Workflow integration

Uses fixtures generated by test_network_fixtures.py
"""

import pytest
import pandas as pd
from pathlib import Path
from statscan.wds.client import Client
from statscan.wds.models.code import CodeSets
from statscan.enums.auto.province_territory import ProvinceTerritory
from statscan.enums.auto.wds.status import Status


class TestWDSClientFunctionality:
    """Test WDS client instantiation and basic functionality."""
    
    def test_client_creation(self, wds_client):
        """Test WDS client can be created successfully."""
        assert wds_client is not None
        print("✅ WDS Client created")
    
    def test_client_has_required_methods(self, wds_client):
        """Test client has all expected async methods."""
        required_methods = [
            'get_code_sets',
            'get_all_cubes_list', 
            'get_cube_metadata',
            'get_data_from_cube_pid_coord_and_latest_n_periods',
            'get_series_info_from_cube_pid_coord'
        ]
        
        for method in required_methods:
            assert hasattr(wds_client, method), f"Missing method: {method}"
        
        print(f"✅ Client has all {len(required_methods)} required methods")


class TestWDSDataExtraction:
    """Test extracting and transforming WDS data for end users."""
    
    def test_code_sets_data_structure(self, wds_code_sets_data):
        """Test working with code sets data structure.""" 
        code_sets = wds_code_sets_data["object"]
        
        # Validate structure
        assert isinstance(code_sets, dict)
        assert len(code_sets) > 0
        
        # Check for expected code sets
        expected_sets = ['scalar', 'frequency', 'uom']  # Units of measure
        found_sets = [s for s in expected_sets if s in code_sets]
        
        print(f"✅ Code sets structure valid, found: {list(code_sets.keys())}")
        print(f"✅ Expected sets present: {found_sets}")
        
        # Test accessing specific codes
        if 'scalar' in code_sets:
            scalar_codes = code_sets['scalar']
            assert isinstance(scalar_codes, list)
            if scalar_codes:
                first_code = scalar_codes[0]
                # Check for the actual field names used in WDS data
                code_field = 'scalarFactorCode' if 'scalarFactorCode' in first_code else 'value'
                desc_field = 'scalarFactorDescEn' if 'scalarFactorDescEn' in first_code else 'desc_en'
                
                assert code_field in first_code
                assert desc_field in first_code
                print(f"✅ Scalar codes accessible: {first_code[desc_field]}")
    
    def test_cubes_list_to_dataframe(self, wds_cubes_list_data):
        """Test converting cubes list to pandas DataFrame."""
        cubes = wds_cubes_list_data["object"]
        
        # Convert to DataFrame
        df = pd.DataFrame(cubes)
        
        # Validate DataFrame structure
        assert len(df) > 0
        expected_columns = ['productId', 'cubeTitleEn', 'cubeTitleFr']
        present_columns = [col for col in expected_columns if col in df.columns]
        assert len(present_columns) > 0
        
        # Test filtering capabilities
        if 'cubeTitleEn' in df.columns:
            population_cubes = df[df['cubeTitleEn'].str.contains('population', case=False, na=False)]
            print(f"✅ DataFrame created: {len(df)} cubes, {len(population_cubes)} population-related")
        
        if 'productId' in df.columns:
            census_cube = df[df['productId'] == 98100001]
            if not census_cube.empty:
                print(f"✅ Found census cube: {census_cube.iloc[0]['cubeTitleEn']}")


class TestWDSSimple:
    """Simple tests that don't require fixtures."""
    
    def test_client_creation_simple(self):
        """Test WDS client can be created without fixtures."""
        client = Client()
        assert client is not None
        print("✅ WDS Client created (no fixtures)")
    
    def test_enum_access(self):
        """Test enum access without fixtures."""
        ontario = ProvinceTerritory.ONTARIO
        assert ontario.value == 35  # Ontario PRUID
        print(f"✅ ProvinceTerritory.ONTARIO = {ontario.value}")
        
        normal_status = Status.NORMAL
        assert normal_status.value == 0
        print(f"✅ Status.NORMAL = {normal_status.value}")
